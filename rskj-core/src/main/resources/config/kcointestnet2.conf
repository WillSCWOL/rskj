blockchain.config.name = "testnet"
blockchain.flushNumberOfBlocks = 1

peer {

    discovery = {

        # if peer discovery is off
        # the peer window will show
        # only what retrieved by active
        # peer [true/false]
        enabled = true

        # List of the peers to start
        # the search of the online peers
        # values: [ip:port]
        ip.list = [
            "localhost:50515",
            "localhost:50517"
        ]
    }

    # Boot node list
    # Use to connect to specific nodes
    active = [
        {
            ip = 127.0.0.1
            port = 50515
            nodeId = 4c3bb585b010921341da70551f40b792cdd39dd05825ae084d583f4a3ddbd7c94b3e975fd3a99d806d89848322504ad67815799ba1e419534525dcc554f2a9f9
        },
        {
            ip = 127.0.0.1
            port = 50517
            nodeId = 092e0113ee732bbf7855ec5baffb51b95654959da1f5a75a3d8444be3ddea0a9b67320921c6cb9ba93a07f4dcd561257ad844045ef24e76000e45a669e4054ee
        }
    ]

    # list of trusted peers the incoming connections is always accepted from. Even if the max amount of connections is reached
    # This is used to create a filter of Trusted peers
    trusted = [
    ]

    # Peer for server to listen for incoming connections
    # 50516 for testnet
    port = 50516

    # connection timeout for trying to connect to a peer [seconds]
    connection.timeout = 2

    # the parameter specifies how much time we will wait for a message to come before closing the channel
    channel.read.timeout = 30

#{
#   "privateKey": "45b89ddd734b7999725e6212113648cd8dc44510352c7fc7d43404c71afd3e4f",
#   "publicKey": "04d662df28319df45dca9c6582cb0da098caec68686e9225cab45256b429ba9723666a25fc9bfe0c8c0ef9a81fe14e811c27ec1faaf75935df974a6483e136f435",
#   "publicKeyCompressed": "03d662df28319df45dca9c6582cb0da098caec68686e9225cab45256b429ba9723",
#   "address": "34b69516507d8a28b7751a1cfc2d6b37e76abd84",
#   "nodeId": "d662df28319df45dca9c6582cb0da098caec68686e9225cab45256b429ba9723666a25fc9bfe0c8c0ef9a81fe14e811c27ec1faaf75935df974a6483e136f435"
#}



    # Private key of the peer
    nodeId = "d662df28319df45dca9c6582cb0da098caec68686e9225cab45256b429ba9723666a25fc9bfe0c8c0ef9a81fe14e811c27ec1faaf75935df974a6483e136f435"
    privateKey = "45b89ddd734b7999725e6212113648cd8dc44510352c7fc7d43404c71afd3e4f"

    # Network id
    networkId = 10789

    p2p {
        # max frame size in bytes when framing is enabled
        framing.maxSize = 32768

        # forces peer to send Handshake message in format defined by EIP-8,
        # see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-8.md
        eip8 = true
    }

    # max number of active peers our node will maintain
    # extra peers trying to connect us will be dropeed with TOO_MANY_PEERS message
    # the incoming connection from the peer matching 'peer.trusted' entry is always accepted
    maxActivePeers = 30
}

# Interface to bind peer discovery and wire protocol
# Make sure you are using the correct bind ip. Wildcard value: 0.0.0.0
bind.address = 0.0.0.0

# public IP/hostname which is reported as our host during discovery
# if not set, the service http://checkip.amazonaws.com is used.
# bind.address is the last resort for public ip when it cannot be obtained by other ways
# public.ip = google.com

# the folder resources/genesis contains several versions of genesis configuration according to the network the peer will run on
genesis = bamboo-testnet.json

# the number of blocks should pass before pending transaction is removed
transaction.outdated.threshold = 10

# the number of seconds should pass before pending transaction is removed
# (suggested value: 10 blocks * 10 seconds by block = 100 seconds)
transaction.outdated.timeout = 100

database {
    # place to save physical storage files
    dir = /opt/kcoinrsknode2/testnet/data

    # every time the application starts the existing database will be destroyed and all the data will be downloaded from peers again
    # having this set on true does NOT mean that the block chain will start from the last point
    # [true/false]
    reset = false
}


dump {
    # for testing purposes all the state will be dumped in JSON form to [dump.dir] if [dump.full] = true
    # possible values [true/false]
    full = false

    dir = dmp

    # This defines the vmtrace dump to the console and the style
    # -1 for no block trace
    block = -1

    # styles: [pretty/standard+] (default: standard+)
    style = pretty

    # clean the dump dir each start
    clean.on.restart = true
}

# structured trace is the trace being collected in the form of objects and exposed to the user in json or any other convenient form
vm.structured {
    trace = false
    dir = vmtrace
    compressed = true
    initStorageLimit = 10000
}

# invoke vm program on message received, if the vm is not invoked the balance transfer occurs anyway  [true/false]
play.vm = true

# hello phrase will be included in the hello message of the peer
hello.phrase = TestNet

# Key value data source values: [leveldb]
keyvalue.datasource = leveldb

# the parameter specify when exactly to switch managing storage of the account on autonomous db
details.inmemory.storage.limit = 1

sync {
    # block chain synchronization can be: [true/false]
    enabled = true

    # maximum blocks hashes to ask sending GET_BLOCK_HASHES msg we specify number of block we want to get, recomended value [1..1000]
    # Default: unlimited
    max.hashes.ask = 10000

    # minimal peers count used in sync process sync may use more peers than this value but always trying to get at least this number from discovery
    peer.count = 1
    expectedPeers = 1

    timeoutWaitingPeers = 1
    timeoutWaitingRequest = 30
    expirationTimePeerStatus = 5

    # whether to wait for blockchain sync to start mining and pegging.
    waitForSync = true
}

# miner options
miner {
    server.enabled = false
    client.enabled = false
    minGasPrice = 0

    # these are values used by MinerServer to set the notify flag on/off
    gasUnitInDollars = 0.001
    minFeesNotifyInDollars = 30
    
    # this string is computed to be eventually the address that get the miner reward
    coinbase.secret = monkey2
}

rpc {
    enabled = true
        
    # Interface to bind rpc
    # Make sure you are using the correct bind. Default value: localhost
    address = 0.0.0.0    
    port = 4455
    
    # Example for host list:
    # host = ["localhost", "private.ip", "external.ip", "example.com", "www.example.com"]

    host = ["localhost", "192.168.0.200"]

    # A value greater than zero sets the socket value in milliseconds. Node attempts to gently close all TCP/IP connections with proper half close semantics,
    # so a linger timeout should not be required and thus the default is -1.
    # linger.time = 0

    cors = "localhost"

    # Enabled RPC Modules. If the module is NOT in the list, and mark as "enabled", the rpc calls will be discard.
    # It is possible to enable/disable a particular method in a module
    # {
    #  name: "evm",
    #  version: "1.0",
    #  enabled: "true",
    #  methods: {
    #   enabled: [ "evm_snapshot", "evm_revert" ],
    #       disabled: [ "evm_reset", "evm_increaseTime" ]
    #  }
    # }
    modules = [
        {
            name: "eth",
            version: "1.0",
            enabled: "true",
        },
        {
            name: "net",
            version: "1.0",
            enabled: "true",
        },
        {
            name: "rpc",
            version: "1.0",
            enabled: "true",
        },
        {
            name: "web3",
            version: "1.0",
            enabled: "true",
        },
        {
            name: "evm",
            version: "1.0",
            enabled: "true"
        },
        {
            name: "sco",
            version: "1.0",
            enabled: "true",
        },
        {
            name: "txpool",
            version: "1.0",
            enabled: "true",
        },
        {
            name: "personal",
            version: "1.0",
            enabled: "true"
        }
    ]
}

# account loaded when the node start.
wallet {
    enabled = true,
    accounts = [
        {
            #0x596ced26448a6cc8f0ab86f4ff0c65c88b3796dc - passphrase:kcoinrsknode2
            "publicKey" : "04543eca9ad50981c60a9c1482581724f62c26dc77122bdc2628bcce0d7c5476bc62a4e992b79867e6e700760da7545827e6da581a255fa2c3695ce9c3fa6b0703",
            "privateKey" : "969db17755d64634859f2298d6b47eab02128ff8941558f64dd1e6415b8d697d"
        }
    ]
}

wire {
    protocol: "rsk"
}

# solc compiler path
solc.path = /usr/bin/solc-static-linux

# not good reputation expiration time in seconds
scoring {
    # punishment by node id
    nodes {
        # number of nodes to keep scoring
        number: 100
        # initial punishment duration (in minutes, default = 10 minutes)
        duration: 12
        # punishment duration increment (in percentage, default = 10)
        increment: 10
        # maximum punishment duration (in minutes, default = 0 minutes, no maximum)
        maximum: 0
    }
    # punishment by address
    addresses {
        # initial punishment duration (in minutes, default = 10 minutes)
        duration: 12
        # punishment duration increment (in percentage, default = 10)
        increment: 10
        # maximum punishment duration (in minutes, default = 1 week)
        maximum: 6000
    }
}
